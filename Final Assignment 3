import pickle
from tkinter import *
from tkinter import messagebox, Tk, Label, Entry, Button

class Person:
    def __init__(self, name, age, date_of_birth):
        self.name = name
        self.age = age
        self.date_of_birth = date_of_birth

    def set_name(self, name):
        self.name = name

    def get_name(self):
        return self.name

    def display(self):
        return f"Name: {self.name}\nAge: {self.age}\nDate of Birth: {self.date_of_birth}\n"

class Employee(Person):
    def __init__(self, name, employee_id, department, job_title, basic_salary, age, date_of_birth, passport_details):
        super().__init__(name, age, date_of_birth)
        self.employee_id = employee_id
        self.department = department
        self.job_title = job_title
        self.basic_salary = basic_salary
        self.passport_details = passport_details

    def set_employee_id(self, employee_id):
        self.employee_id = employee_id

    def get_employee_id(self):
        return self.employee_id

    def display(self):
        return f"Employee ID: {self.employee_id}\nDepartment: {self.department}\nJob Title: {self.job_title}\nSalary: {self.basic_salary}\n" + super().display()

class Client:
    def __init__(self, client_id, name, address, contact_details, budget):
        self.client_id = client_id
        self.name = name
        self.address = address
        self.contact_details = contact_details
        self.budget = budget


    def set_client_id(self, client_id):
        self.client_id = client_id

    def get_client_id(self):
        return self.client_id

    def display(self):
        return f"Client ID: {self.client_id}\nName: {self.name}\nAddress: {self.address}\nContact Details: {self.contact_details}\nBudget: {self.budget}\n"


class Guest:
    def __init__(self, guest_id, name, address, contact_details):
        self.guest_id = guest_id
        self.name = name
        self.address = address
        self.contact_details = contact_details


    def set_guest_id(self, guest_id):
        self.guest_id = guest_id

    def get_guest_id(self):
        return self.guest_id

    def display(self):
        return f"Guest ID: {self.guest_id}\nName: {self.name}\nAddress: {self.address}\nContact Details: {self.contact_details}\n"

class Venue:
    def __init__(self, venue_id, name, address, contact, minimum_number_of_guests, maximum_number_of_guests):
        self.venue_id = venue_id
        self.name = name
        self.address = address
        self.contact = contact
        self.minimum_number_of_guests = minimum_number_of_guests
        self.maximum_number_of_guests = maximum_number_of_guests

    def set_address(self, address):
        self.address = address

    def get_address(self):
        return self.address

    def display(self):
        return f"Venue ID: {self.venue_id}\nName: {self.name}\nAddress: {self.address}\nContact: {self.contact}\nMin Guests: {self.minimum_number_of_guests}\nMax Guests: {self.maximum_number_of_guests}\n"


class Supplier:
    def __init__(self, id, name, address, contact_details, service_menu, minimum_number_of_guests,
                 maximum_number_of_guests):
        self.id = id
        self.name = name
        self.address = address
        self.contact_details = contact_details
        self.service_menu = service_menu
        self.minimum_number_of_guests = minimum_number_of_guests
        self.maximum_number_of_guests = maximum_number_of_guests


    def set_id(self, id):
        self.id = id

    def get_id(self):
        return self.id

    def display(self):
        return f"Supplier ID: {self.id}\nName: {self.name}\nAddress: {self.address}\nContact Details: {self.contact_details}\nService Menu: {self.service_menu}\nMin Guests: {self.minimum_number_of_guests}\nMax Guests: {self.maximum_number_of_guests}\n"


class Event:
    def __init__(self, event_id, event_type, theme, date, time, duration, venue, client_id, guest_list,
                 catering_company,
                 cleaning_company, decorations_company, entertainment_company, furniture_supply_company, invoice):
        self.event_id = event_id
        self.event_type = event_type
        self.theme = theme
        self.date = date
        self.time = time
        self.duration = duration
        self.venue_address = venue #####
        self.client_id = client_id
        self.guest_list = guest_list if guest_list is not None else []  # IDs of guests
        self.catering_company = catering_company
        self.cleaning_company = cleaning_company
        self.decorations_company = decorations_company
        self.entertainment_company = entertainment_company
        self.furniture_supply_company = furniture_supply_company
        self.invoice = invoice


    def set_theme(self, theme):
        self.theme = theme

    def get_theme(self):
        return self.theme

    def display(self):
        return f"Event ID: {self.event_id}\nType: {self.event_type}\nTheme: {self.theme}\nDate: {self.date}\nTime: {self.time}\nDuration: {self.duration}\nVenue: {self.venue_address}\nClient ID: {self.client_id}\nGuest List: {self.guest_list}\nCatering: {self.catering_company}\nCleaning: {self.cleaning_company}\nDecorations: {self.decorations_company}\nEntertainment: {self.entertainment_company}\nFurniture: {self.furniture_supply_company}\nInvoice: {self.invoice}\n"

class Company:
    def __init__(self):
        self.employees = {}
        self.events = {}
        self.clients = {}
        self.suppliers = {}
        self.guests = {}
        self.venues = {}

    def add_employee(self, employee):
        self.employees[employee.employee_id] = employee

    def delete_employee(self, employee_id):
        if employee_id in self.employees:
            del self.employees[employee_id]

    def modify_employee(self, employee_id, new_employee):
        if employee_id in self.employees:
            self.employees[employee_id] = new_employee

    def display_all_employees(self):
        return [employee.display() for employee in self.employees.values()]

    def display_employee_by_id(self, employee_id):
        if employee_id in self.employees:
            return self.employees[employee_id].display()
        else:
            return "Employee not found."

    def add_client(self, client):
        self.clients[client.client_id] = client

    def delete_client(self, client_id):
        if client_id in self.clients:
            del self.clients[client_id]

    def modify_client(self, client_id, new_client):
        if client_id in self.clients:
            self.clients[client_id] = new_client

    def display_all_clients(self):
        return [client.display() for client in self.clients.values()]

    def display_client_by_id(self, client_id):
        if client_id in self.clients:
            return self.clients[client_id].display()
        else:
            return "Client not found."

    def add_guest(self, guest):
        self.guests[guest.guest_id] = guest

    def delete_guest(self, guest_id):
        if guest_id in self.guests:
            del self.guests[guest_id]

    def modify_guest(self, guest_id, new_guest):
        if guest_id in self.guests:
            self.guests[guest_id] = new_guest

    def display_all_guests(self):
        return [guest.display() for guest in self.guests.values()]

    def display_guest_by_id(self, guest_id):
        if guest_id in self.guests:
            return self.guests[guest_id].display()
        else:
            return "Guest not found."

    def add_supplier(self, supplier):
        self.suppliers[supplier.id] = supplier

    def delete_supplier(self, supplier_id):
        if supplier_id in self.suppliers:
            del self.suppliers[supplier_id]

    def modify_supplier(self, supplier_id, new_supplier):
        if supplier_id in self.suppliers:
            self.suppliers[supplier_id] = new_supplier

    def display_all_suppliers(self):
        return [supplier.display() for supplier in self.suppliers.values()]

    def display_supplier_by_id(self, supplier_id):
        if supplier_id in self.suppliers:
            return self.suppliers[supplier_id].display()
        else:
            return "Supplier not found."

    def add_venue(self, venue):
        self.venues[venue.venue_id] = venue

    def delete_venue(self, venue_id):
        if venue_id in self.venues:
            del self.venues[venue_id]

    def modify_venue(self, venue_id, new_venue):
        if venue_id in self.venues:
            self.venues[venue_id] = new_venue

    def display_all_venues(self):
        return [venue.display() for venue in self.venues.values()]

    def display_venue_by_id(self, venue_id):
        if venue_id in self.venues:
            return self.venues[venue_id].display()
        else:
            return "Venue not found."

    def add_event(self, event):
        self.events[event.event_id] = event

    def delete_event(self, event_id):
        if event_id in self.events:
            del self.events[event_id]

    def modify_event(self, event_id, new_event):
        if event_id in self.events:
            self.events[event_id] = new_event

    def display_all_events(self):
        return [event.display() for event in self.events.values()]

    def display_event_by_id(self, event_id):
        if event_id in self.events:
            return self.events[event_id].display()
        else:
            return "Event not found."


class EventManagementGUI:
    def __init__(self, master, company):
        self.master = master
        self.company = company
        self.master.title("Event Management System")
        self.master.geometry("800x400")  # Sets the size of the window

        #display
        self.padding_frame_top = Frame(self.master, height=30)
        self.padding_frame_top.pack()

        self.employee_frame = Frame(self.master)
        self.employee_frame.pack(pady=10)
        self.add_employee_button = Button(self.employee_frame, text="Add Employee", command=self.add_employee)
        self.add_employee_button.pack(side=LEFT, padx=10)
        self.delete_employee_button = Button(self.employee_frame, text="Delete Employee", command=self.delete_employee)
        self.delete_employee_button.pack(side=LEFT, padx=10)
        self.modify_employee_button = Button(self.employee_frame, text="Modify Employee", command=self.modify_employee)
        self.modify_employee_button.pack(side=LEFT, padx=10)
        self.display_all_employees_button = Button(self.employee_frame, text="Display All Employees",
                                                   command=self.display_all_employees)
        self.display_all_employees_button.pack(side=LEFT, padx=10)
        self.display_employee_by_id_button = Button(self.employee_frame, text="Display Employee by ID",
                                                    command=self.display_employee_by_id)
        self.display_employee_by_id_button.pack(side=LEFT, padx=10)

        self.client_frame = Frame(self.master)
        self.client_frame.pack(pady=10)
        self.add_client_button = Button(self.client_frame, text="Add Client", command=self.add_client)
        self.add_client_button.pack(side=LEFT, padx=10)
        self.delete_client_button = Button(self.client_frame, text="Delete Client", command=self.delete_client)
        self.delete_client_button.pack(side=LEFT, padx=10)
        self.modify_client_button = Button(self.client_frame, text="Modify Client", command=self.modify_client)
        self.modify_client_button.pack(side=LEFT, padx=10)
        self.display_all_clients_button = Button(self.client_frame, text="Display All Clients",
                                                 command=self.display_all_clients)
        self.display_all_clients_button.pack(side=LEFT, padx=10)
        self.display_client_by_id_button = Button(self.client_frame, text="Display Client by ID",
                                                  command=self.display_client_by_id)
        self.display_client_by_id_button.pack(side=LEFT, padx=10)

        self.guest_frame = Frame(self.master)
        self.guest_frame.pack(pady=10)
        self.add_guest_button = Button(self.guest_frame, text="Add Guest", command=self.add_guest)
        self.add_guest_button.pack(side=LEFT, padx=10)
        self.delete_guest_button = Button(self.guest_frame, text="Delete Guest", command=self.delete_guest)
        self.delete_guest_button.pack(side=LEFT, padx=10)
        self.modify_guest_button = Button(self.guest_frame, text="Modify Guest", command=self.modify_guest)
        self.modify_guest_button.pack(side=LEFT, padx=10)
        self.display_all_guests_button = Button(self.guest_frame, text="Display All Guests",
                                                command=self.display_all_guests)
        self.display_all_guests_button.pack(side=LEFT, padx=10)
        self.display_guest_by_id_button = Button(self.guest_frame, text="Display Guest by ID",
                                                 command=self.display_guest_by_id)
        self.display_guest_by_id_button.pack(side=LEFT, padx=10)

        self.venue_frame = Frame(self.master)
        self.venue_frame.pack(pady=10)
        self.add_venue_button = Button(self.venue_frame, text="Add Venue", command=self.add_venue)
        self.add_venue_button.pack(side=LEFT, padx=10)
        self.delete_venue_button = Button(self.venue_frame, text="Delete Venue", command=self.delete_venue)
        self.delete_venue_button.pack(side=LEFT, padx=10)
        self.modify_venue_button = Button(self.venue_frame, text="Modify Venue", command=self.modify_venue)
        self.modify_venue_button.pack(side=LEFT, padx=10)
        self.display_all_venues_button = Button(self.venue_frame, text="Display All Venues",
                                                command=self.display_all_venues)
        self.display_all_venues_button.pack(side=LEFT, padx=10)
        self.display_venue_by_id_button = Button(self.venue_frame, text="Display Venue by ID",
                                                 command=self.display_venue_by_id)
        self.display_venue_by_id_button.pack(side=LEFT, padx=10)

        self.supplier_frame = Frame(self.master)
        self.supplier_frame.pack(pady=10)
        self.add_supplier_button = Button(self.supplier_frame, text="Add Supplier", command=self.add_supplier)
        self.add_supplier_button.pack(side=LEFT, padx=10)
        self.delete_supplier_button = Button(self.supplier_frame, text="Delete Supplier", command=self.delete_supplier)
        self.delete_supplier_button.pack(side=LEFT, padx=10)
        self.modify_supplier_button = Button(self.supplier_frame, text="Modify Supplier", command=self.modify_supplier)
        self.modify_supplier_button.pack(side=LEFT, padx=10)
        self.display_all_suppliers_button = Button(self.supplier_frame, text="Display All Suppliers",
                                                   command=self.display_all_suppliers)
        self.display_all_suppliers_button.pack(side=LEFT, padx=10)
        self.display_supplier_by_id_button = Button(self.supplier_frame, text="Display Supplier by ID",
                                                    command=self.display_supplier_by_id)
        self.display_supplier_by_id_button.pack(side=LEFT, padx=10)

        self.event_frame = Frame(self.master)
        self.event_frame.pack(pady=10)
        self.add_event_button = Button(self.event_frame, text="Add Event", command=self.add_event)
        self.add_event_button.pack(side=LEFT, padx=10)
        self.delete_event_button = Button(self.event_frame, text="Delete Event", command=self.delete_event)
        self.delete_event_button.pack(side=LEFT, padx=10)
        self.modify_event_button = Button(self.event_frame, text="Modify Event", command=self.modify_event)
        self.modify_event_button.pack(side=LEFT, padx=10)
        self.display_all_events_button = Button(self.event_frame, text="Display All Events",
                                                command=self.display_all_events)
        self.display_all_events_button.pack(side=LEFT, padx=10)
        self.display_event_by_id_button = Button(self.event_frame, text="Display Event by ID",
                                                 command=self.display_event_by_id)
        self.display_event_by_id_button.pack(side=LEFT, padx=10)

    #employees
    def add_employee(self):
        # new window for adding an employee
        self.add_employee_window = Tk()
        self.add_employee_window.title("Add Employee")
        self.add_employee_window.geometry("400x400")

        labels = ['Name:', 'Employee ID:', 'Department:', 'Job Title:', 'Basic Salary:', 'Age:', 'Date of Birth:',
                  'Passport Details:']
        entries = []
        for i, label_text in enumerate(labels):
            label = Label(self.add_employee_window, text=label_text)
            label.grid(row=i, column=0, pady=5, padx=(70, 0))
            entry = Entry(self.add_employee_window)
            entry.grid(row=i, column=1, pady=5)
            entries.append(entry)

        add_button = Button(self.add_employee_window, text="Add Employee",
                            command=lambda: self.add_employee_to_company(entries))
        add_button.grid(row=len(labels), columnspan=2, pady=10, padx=(20, 0))

    def add_employee_to_company(self, entries):
        name = entries[0].get()
        employee_id = entries[1].get()
        department = entries[2].get()
        job_title = entries[3].get()
        basic_salary = entries[4].get()
        age = entries[5].get()
        date_of_birth = entries[6].get()
        passport_details = entries[7].get()

        new_employee = Employee(name, employee_id, department, job_title, basic_salary, age, date_of_birth,
                                passport_details)
        self.company.add_employee(new_employee)
        self.add_employee_window.destroy()

    def delete_employee(self):
        self.delete_employee_window = Tk()
        self.delete_employee_window.title("Delete Employee")
        self.delete_employee_window.geometry("300x100")
        label = Label(self.delete_employee_window, text="Enter Employee ID to delete:")
        label.pack()
        entry = Entry(self.delete_employee_window)
        entry.pack()
        delete_button = Button(self.delete_employee_window, text="Delete",
                               command=lambda: self.delete_employee_from_company(entry.get()))
        delete_button.pack()

    def delete_employee_from_company(self, employee_id):
        self.company.delete_employee(employee_id)
        self.delete_employee_window.destroy()

    def modify_employee(self):
        self.modify_employee_window = Tk()
        self.modify_employee_window.title("Modify Employee")
        self.modify_employee_window.geometry("400x400")

        labels = ['Employee ID:', 'New Name:', 'New Department:', 'New Job Title:', 'New Basic Salary:', 'New Age:',
                  'New Date of Birth:', 'New Passport Details:']
        entries = []
        for i, label_text in enumerate(labels):
            label = Label(self.modify_employee_window, text=label_text)
            label.grid(row=i, column=0, pady=5, padx=(70, 0))
            entry = Entry(self.modify_employee_window)
            entry.grid(row=i, column=1, pady=5)
            entries.append(entry)

        modify_button = Button(self.modify_employee_window, text="Modify Employee",
                               command=lambda: self.modify_employee_in_company(entries))
        modify_button.grid(row=len(labels), columnspan=2, pady=10, padx=(20, 0))

    def modify_employee_in_company(self, entries):
        employee_id = entries[0].get()
        new_name = entries[1].get()
        new_department = entries[2].get()
        new_job_title = entries[3].get()
        new_basic_salary = entries[4].get()
        new_age = entries[5].get()
        new_date_of_birth = entries[6].get()
        new_passport_details = entries[7].get()

        if employee_id in self.company.employees:
            employee = self.company.employees[employee_id]
            if new_name:
                employee.name = new_name
            if new_department:
                employee.department = new_department
            if new_job_title:
                employee.job_title = new_job_title
            if new_basic_salary:
                employee.basic_salary = new_basic_salary
            if new_age:
                employee.age = new_age
            if new_date_of_birth:
                employee.date_of_birth = new_date_of_birth
            if new_passport_details:
                employee.passport_details = new_passport_details

            # update the employee in the company's dictionary
            self.company.employees[employee_id] = employee
            messagebox.showinfo("Employee Modified", f"Employee with ID {employee_id} modified successfully.")
            self.modify_employee_window.destroy()
        else:
            messagebox.showerror("Error", f"Employee with ID {employee_id} not found.")

    def display_all_employees(self):
        messagebox.showinfo("All Employees", "\n".join(self.company.display_all_employees()))

    def display_employee_by_id(self):
        self.display_employee_by_id_window = Tk()
        self.display_employee_by_id_window.title("Display Employee by ID")
        self.display_employee_by_id_window.geometry("400x400")

        label = Label(self.display_employee_by_id_window, text="Enter Employee ID:")
        label.pack(pady=10)
        entry = Entry(self.display_employee_by_id_window)
        entry.pack(pady=5)

        display_button = Button(self.display_employee_by_id_window, text="Display Employee",
                                command=lambda: self.display_employee_by_id_from_company(entry.get()))
        display_button.pack(pady=10)
        self.displayed_employee_label = Label(self.display_employee_by_id_window, text="")
        self.displayed_employee_label.pack(pady=10)

    def display_employee_by_id_from_company(self, employee_id):
        if employee_id in self.company.employees:
            employee = self.company.employees[employee_id]
            messagebox.showinfo("Employee Details", employee.display())
        else:
            messagebox.showerror("Error", f"Employee with ID {employee_id} not found.")

    #client
    def add_client(self):
        self.add_client_window = Tk()
        self.add_client_window.title("Add Client")
        self.add_client_window.geometry("400x400")

        labels = ['Client ID:', 'Name', 'Address:', 'Contact Details:', 'Budget:']
        entries = []
        for i, label_text in enumerate(labels):
            label = Label(self.add_client_window, text=label_text)
            label.grid(row=i, column=0, pady=5, padx=(70, 0))
            entry = Entry(self.add_client_window)
            entry.grid(row=i, column=1, pady=5)
            entries.append(entry)

        add_button = Button(self.add_client_window, text="Add Client",
                            command=lambda: self.add_client_to_company(entries))
        add_button.grid(row=len(labels), columnspan=2, pady=10, padx=(20, 0))

    def add_client_to_company(self, entries):
        client_id = entries[0].get()
        name = entries[1].get()
        address = entries[2].get()
        contact_details = entries[3].get()
        budget = entries[4].get()

        new_client = Client(client_id, name, address, contact_details, budget)
        self.company.add_client(new_client)
        self.add_client_window.destroy()

    def delete_client(self):
        self.delete_client_window = Tk()
        self.delete_client_window.title("Delete Client")
        self.delete_client_window.geometry("300x100")
        label = Label(self.delete_client_window, text="Enter Client ID to delete:")
        label.pack()
        entry = Entry(self.delete_client_window)
        entry.pack()
        delete_button = Button(self.delete_client_window, text="Delete",
                               command=lambda: self.delete_client_from_company(entry.get()))
        delete_button.pack()

    def delete_client_from_company(self, client_id):
        self.company.delete_client(client_id)
        self.delete_client_window.destroy()

    def modify_client(self):
        self.modify_client_window = Tk()
        self.modify_client_window.title("Modify Client")
        self.modify_client_window.geometry("400x400")

        labels = ['Client ID:', 'New Name', 'New Address:', 'New Contact Details:', 'New Budget:']
        entries = []
        for i, label_text in enumerate(labels):
            label = Label(self.modify_client_window, text=label_text)
            label.grid(row=i, column=0, pady=5, padx=(70, 0))
            entry = Entry(self.modify_client_window)
            entry.grid(row=i, column=1, pady=5)
            entries.append(entry)

        modify_button = Button(self.modify_client_window, text="Modify Client",
                               command=lambda: self.modify_client_in_company(entries))
        modify_button.grid(row=len(labels), columnspan=2, pady=10, padx=(20, 0))

    def modify_client_in_company(self, entries):
        client_id = entries[0].get()
        new_name = entries[1].get()
        new_address = entries[2].get()
        new_contact_details = entries[3].get()
        new_budget = entries[4].get()

        if client_id in self.company.clients:
            client = self.company.clients[client_id]
            if new_name:
                client.name = new_name
            if new_address:
                client.company = new_address
            if new_contact_details:
                client.contact_details = new_contact_details
            if new_budget:
                client.budget = new_budget
            if new_address:
                client.address = new_address

            self.company.clients[client_id] = client
            messagebox.showinfo("Client Modified", f"Client with ID {client_id} modified successfully.")
            self.modify_client_window.destroy()
        else:
            messagebox.showerror("Error", f"Client with ID {client_id} not found.")

    def display_all_clients(self):
        clients_info = "\n".join([client.display() for client in self.company.clients.values()])
        messagebox.showinfo("All Clients", clients_info)

    def display_client_by_id(self):
        self.display_client_by_id_window = Tk()
        self.display_client_by_id_window.title("Display Client by ID")
        self.display_client_by_id_window.geometry("300x100")

        label = Label(self.display_client_by_id_window, text="Enter Client ID:")
        label.pack(pady=10)
        entry = Entry(self.display_client_by_id_window)
        entry.pack(pady=5)

        display_button = Button(self.display_client_by_id_window, text="Display Client",
                                command=lambda: self.display_client_by_id_from_company(entry.get()))
        display_button.pack(pady=10)
        self.displayed_client_label = Label(self.display_client_by_id_window, text="")
        self.displayed_client_label.pack(pady=10)

    def display_client_by_id_from_company(self, client_id):
        if client_id in self.company.clients:
            client = self.company.clients[client_id]
            messagebox.showinfo("Client Details", client.display())
        else:
            messagebox.showerror("Error", f"Client with ID {client_id} not found.")

    #Guest
    def add_guest(self):
        self.add_guest_window = Tk()
        self.add_guest_window.title("Add Guest")
        self.add_guest_window.geometry("400x400")

        labels = ['Guest ID:', 'Name:', 'Address:', 'Contact Details:']
        entries = []
        for i, label_text in enumerate(labels):
            label = Label(self.add_guest_window, text=label_text)
            label.grid(row=i, column=0, pady=5, padx=(70, 0))
            entry = Entry(self.add_guest_window)
            entry.grid(row=i, column=1, pady=5)
            entries.append(entry)

        add_button = Button(self.add_guest_window, text="Add Guest", command=lambda: self.add_guest_to_company(entries))
        add_button.grid(row=len(labels), columnspan=2, pady=10, padx=(20, 0))

    def add_guest_to_company(self, entries):
        guest_id = entries[0].get()
        name = entries[1].get()
        address = entries[2].get()
        contact_details = entries[3].get()

        new_guest = Guest(guest_id, name, address, contact_details)
        self.company.add_guest(new_guest)
        self.add_guest_window.destroy()

    def delete_guest(self):
        self.delete_guest_window = Tk()
        self.delete_guest_window.title("Delete Guest")
        self.delete_guest_window.geometry("300x100")
        label = Label(self.delete_guest_window, text="Enter Guest ID to delete:")
        label.pack()
        entry = Entry(self.delete_guest_window)
        entry.pack()
        delete_button = Button(self.delete_guest_window, text="Delete",
                               command=lambda: self.delete_guest_from_company(entry.get()))
        delete_button.pack()

    def delete_guest_from_company(self, guest_id):
        self.company.delete_guest(guest_id)
        self.delete_guest_window.destroy()

    def modify_guest(self):
        self.modify_guest_window = Tk()
        self.modify_guest_window.title("Modify Guest")
        self.modify_guest_window.geometry("400x400")

        labels = ['Guest ID:', 'Name:', 'Address:', 'Contact Details:']
        entries = []
        for i, label_text in enumerate(labels):
            label = Label(self.modify_guest_window, text=label_text)
            label.grid(row=i, column=0, pady=5, padx=(70, 0))
            entry = Entry(self.modify_guest_window)
            entry.grid(row=i, column=1, pady=5)
            entries.append(entry)

        modify_button = Button(self.modify_guest_window, text="Modify Guest",
                               command=lambda: self.modify_guest_in_company(entries))
        modify_button.grid(row=len(labels), columnspan=2, pady=10, padx=(20, 0))

    def modify_guest_in_company(self, entries):
        guest_id = entries[0].get()
        new_name = entries[1].get()
        new_address = entries[2].get()
        new_contact_details = entries[3].get()

        if guest_id in self.company.guests:
            guest = self.company.guests[guest_id]
            if new_name:
                guest.name = new_name
            if new_address:
                guest.address = new_address
            if new_contact_details:
                guest.contact_details = new_contact_details

            self.company.guests[guest_id] = guest
            messagebox.showinfo("Guest Modified", f"Guest with ID {guest_id} modified successfully.")
            self.modify_guest_window.destroy()
        else:
            messagebox.showerror("Error", f"Guest with ID {guest_id} not found.")

    def display_all_guests(self):
        messagebox.showinfo("All Guests", "\n".join(self.company.display_all_guests()))

    def display_guest_by_id(self):
        self.display_guest_by_id_window = Tk()
        self.display_guest_by_id_window.title("Display Guest by ID")
        self.display_guest_by_id_window.geometry("400x400")

        label = Label(self.display_guest_by_id_window, text="Enter Guest ID:")
        label.pack(pady=10)
        entry = Entry(self.display_guest_by_id_window)
        entry.pack(pady=5)

        display_button = Button(self.display_guest_by_id_window, text="Display Guest",
                                command=lambda: self.display_guest_by_id_from_company(entry.get()))
        display_button.pack(pady=10)
        self.displayed_guest_label = Label(self.display_guest_by_id_window, text="")
        self.displayed_guest_label.pack(pady=10)

    def display_guest_by_id_from_company(self, guest_id):
        if guest_id in self.company.guests:
            guest = self.company.guests[guest_id]
            messagebox.showinfo("Guest Details", guest.display())
        else:
            messagebox.showerror("Error", f"Guest with ID {guest_id} not found.")

    #Venue
    def add_venue(self):
        self.add_venue_window = Tk()
        self.add_venue_window.title("Add Venue")
        self.add_venue_window.geometry("400x400")

        labels = ['Venue ID:', 'Venue Name:', 'Address:', 'Contact:', 'Min Guests:', 'Max Guests:']
        entries = []
        for i, label_text in enumerate(labels):
            label = Label(self.add_venue_window, text=label_text)
            label.grid(row=i, column=0, pady=5, padx=(70, 0))
            entry = Entry(self.add_venue_window)
            entry.grid(row=i, column=1, pady=5)
            entries.append(entry)

        add_button = Button(self.add_venue_window, text="Add Venue", command=lambda: self.add_venue_to_company(entries))
        add_button.grid(row=len(labels), columnspan=2, pady=10, padx=(20, 0))

    def add_venue_to_company(self, entries):
        venue_id = entries[0].get()
        venue_name = entries[1].get()
        address = entries[2].get()
        contact = entries[3].get()
        minimum_guests = entries[4].get()
        maximum_guests = entries[5].get()

        new_venue = Venue(venue_id, venue_name, address, contact, minimum_guests, maximum_guests)
        self.company.add_venue(new_venue)
        self.add_venue_window.destroy()

    def delete_venue(self):
        self.delete_venue_window = Tk()
        self.delete_venue_window.title("Delete Venue")
        self.delete_venue_window.geometry("300x100")
        label = Label(self.delete_venue_window, text="Enter Venue ID to delete:")
        label.pack()
        entry = Entry(self.delete_venue_window)
        entry.pack()
        delete_button = Button(self.delete_venue_window, text="Delete",
                               command=lambda: self.delete_venue_from_company(entry.get()))
        delete_button.pack()

    def delete_venue_from_company(self, venue_id):
        self.company.delete_venue(venue_id)
        self.delete_venue_window.destroy()

    def modify_venue(self):
        self.modify_venue_window = Tk()
        self.modify_venue_window.title("Modify Venue")
        self.modify_venue_window.geometry("400x400")

        labels = ['Venue ID:', 'Venue Name:', 'Address:', 'Contact:', 'Min Guests:', 'Max Guests:']
        entries = []
        for i, label_text in enumerate(labels):
            label = Label(self.modify_venue_window, text=label_text)
            label.grid(row=i, column=0, pady=5, padx=(70, 0))
            entry = Entry(self.modify_venue_window)
            entry.grid(row=i, column=1, pady=5)
            entries.append(entry)

        modify_button = Button(self.modify_venue_window, text="Modify Venue",
                               command=lambda: self.modify_venue_in_company(entries))
        modify_button.grid(row=len(labels), columnspan=2, pady=10, padx=(20, 0))

    def modify_venue_in_company(self, entries):
        venue_id = entries[0].get()
        new_venue_name = entries[1].get()
        new_address = entries[2].get()
        new_contact = entries[3].get()
        new_minimum_guests = entries[4].get()
        new_maximum_guests = entries[5].get()

        if venue_id in self.company.venues:
            venue = self.company.venues[venue_id]
            if venue_id:
                venue.venue_id = venue_id
            if new_venue_name:
                venue.name = new_venue_name
            if new_address:
                venue.address = new_address
            if new_contact:
                venue.contact = new_contact
            if new_minimum_guests:
                venue.minimum_number_of_guests = new_minimum_guests
            if new_maximum_guests:
                venue.maximum_number_of_guests = new_maximum_guests

            self.company.venues[venue_id] = venue
            messagebox.showinfo("Venue Modified", f"Venue with ID {venue_id} modified successfully.")
            self.modify_venue_window.destroy()
        else:
            messagebox.showerror("Error", f"Venue with ID {venue_id} not found.")

    def display_all_venues(self):
        messagebox.showinfo("All Venues", "\n".join(self.company.display_all_venues()))

    def display_venue_by_id(self):
        self.display_venue_by_id_window = Tk()
        self.display_venue_by_id_window.title("Display Venue by ID")
        self.display_venue_by_id_window.geometry("400x400")

        label = Label(self.display_venue_by_id_window, text="Enter Venue ID:")
        label.pack(pady=10)
        entry = Entry(self.display_venue_by_id_window)
        entry.pack(pady=5)

        display_button = Button(self.display_venue_by_id_window, text="Display Venue",
                                command=lambda: self.display_venue_by_id_from_company(entry.get()))
        display_button.pack(pady=10)
        self.displayed_venue_label = Label(self.display_venue_by_id_window, text="")
        self.displayed_venue_label.pack(pady=10)

    def display_venue_by_id_from_company(self, venue_id):
        if venue_id in self.company.venues:
            venue = self.company.venues[venue_id]
            messagebox.showinfo("Venue Details", venue.display())
        else:
            messagebox.showerror("Error", f"Venue with ID {venue_id} not found.")
